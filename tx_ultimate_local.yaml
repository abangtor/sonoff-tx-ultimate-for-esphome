substitutions:
  name: "txultimatetest1"
  friendly_name: "TX Ultimate Test1"

  relay_count: "2"

  toggle_relay_1_on_touch: "true"
  toggle_relay_2_on_touch: "true"
  toggle_relay_3_on_touch: "true"

  vibra_time: 50ms
  button_on_time: 600ms

  button_brightness: "0.7"
  button_color: "{0,0,100}"
  button_transition_time: "2s"

  nightlight_brightness: "0.25"
  nightlight_color: "{100,80,35}"

  latitude: "5.285153°"
  longitude: "100.456238°"

  touch_color: "{0,50,100}"
  touch_brightness: "1"
  touch_press_brightness: "0.5"
  touch_effect_press: "Press HB"
  touch_effect_left: "Press Left"
  touch_effect_center: "Press Center"
  touch_effect_right: "Press Right"

  boot_brightness: "0.25"
  boot_color: "{100,100,0}"
  boot_effect: "Scan"

  long_press_brightness: "1"
  long_press_color: "{100,80,35}"
  long_press_effect: "Slow Pulse"

  multi_touch_brightness: "0.8"
  multi_touch_color: "{100,100,100}"
  multi_touch_effect: "Slow Pulse"

  swipe_left_brightness: "1"
  swipe_left_color: "{0,50,100}"
  swipe_left_effect: "Swipe Left"

  swipe_right_brightness: "1"
  swipe_right_color: "{0,50,100}"
  swipe_right_effect: "Swipe Right"

  audio_playing_brightness: "1"
  audio_playing_color: "{100,80,0}"
  audio_playing_effect: "Scan"

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  touchpanel_power_pin: GPIO5

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
    priority: 700
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${boot_brightness}
          red: !lambda "return id(boot_color)[0]/100.0;"
          green: !lambda "return id(boot_color)[1]/100.0;"
          blue:  !lambda "return id(boot_color)[2]/100.0;"
          effect: ${boot_effect}
      - wait_until:
          condition:
            wifi.connected:
          timeout: 1min
      - wait_until:
          condition:
            api.connected:
          timeout: 10s
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - light.turn_off:
          id: leds
      - script.execute: refresh_led_default

esp32:
  board: esp32dev
  framework:
    type: arduino

preferences:
  flash_write_interval: 7days

logger:
  level: INFO #DEBUG
  logs:
    binary_sensor: INFO
    light: INFO
    script: INFO
    switch: INFO
    tx_ultimate_touch: INFO
    uart_debug: INFO

api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} AP"
    password: !secret ap_password

improv_serial:

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/abangtor/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch]

globals:
  - id: nightlight_color
    type: int [3]
    restore_value: no
    initial_value: ${nightlight_color}
  - id: button_color
    type: int [3]
    restore_value: no
    initial_value: ${button_color}
  - id: boot_color
    type: int [3]
    restore_value: no
    initial_value: ${boot_color}
  - id: long_press_color
    type: int [3]
    restore_value: no
    initial_value: ${long_press_color}
  - id: multi_touch_color
    type: int [3]
    restore_value: no
    initial_value: ${multi_touch_color}
  - id: swipe_left_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_left_color}
  - id: swipe_right_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_right_color}
  - id: audio_playing_color
    type: int [3]
    restore_value: no
    initial_value: ${audio_playing_color}
  - id: touch_color
    type: int [3]
    restore_value: no
    initial_value: ${touch_color}

binary_sensor:
  - platform: template
    name: "Touchfield 1"
    id: touchfield_1
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_1_on_touch};"
          then:
            - switch.toggle: relay_1
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Touchfield 2"
    id: touchfield_2
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_2_on_touch};"
          then:
            - switch.toggle: relay_2
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Touchfield 3"
    id: touchfield_3
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_3_on_touch};"
          then:
            - switch.toggle: relay_3
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Swipe Left"
    id: swipe_left
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Swipe Right"
    id: swipe_right
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Multi Touch"
    id: multi_touch
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - script.execute: refresh_led_default

  - platform: template
    name: "Long Press"
    id: long_press
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - switch.toggle: nightlight
      - script.execute: refresh_led_default

switch:
  - platform: gpio
    id: relay_1
    name: "L1"
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_relais
    on_turn_off:
      then:
        - script.execute: refresh_led_relais

  - platform: gpio
    id: relay_2
    name: "L2"
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_relais
    on_turn_off:
      then:
        - script.execute: refresh_led_relais

  - platform: gpio
    id: relay_3
    name: "L3"
    pin: ${relay_3_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_relais
    on_turn_off:
      then:
        - script.execute: refresh_led_relais

  - platform: gpio
    id: vibra
    pin: ${vibra_motor_pin}
    name: "Vibration"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: vibra

  - platform: gpio
    id: pa_power
    pin: ${pa_power_pin}
    name: "PA Power"
    internal: true
    restore_mode: ALWAYS_ON

  - platform: gpio
    name: "touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    id: touch_power
    internal: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    name: "Nightlight"
    id: nightlight
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: restart
    name: "Restart"

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: ${led_pin}
    num_leds: 28
    name: "NeoPixel Light"
    id: leds
    #internal: true
    default_transition_length: 0s
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 30
          width: 8
      - addressable_rainbow:
          name: "Rainbow Wide"
          speed: 10
          width: 28
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s
      - pulse:
          name: "Slow Pulse"
          transition_length: 2s
          update_interval: 2s
      - addressable_lambda:
          name: "Rotation"
          update_interval: 16ms
          lambda: |-
            static uint8_t   ui8Pos = 23;
            if (initial_run) ui8Pos = 23;
            it.all().fade_to_black(14);
            it[ui8Pos] = current_color;
            ui8Pos++;
            if(it.size() <= ui8Pos) ui8Pos = 0;
      - addressable_lambda:
          name: "Rotation Slow"
          update_interval: 64ms
          lambda: |-
            static uint8_t   ui8Pos = 23;
            if (initial_run) ui8Pos = 23;
            it.all().fade_to_black(14);
            it[ui8Pos] = current_color;
            ui8Pos++;
            if(it.size() <= ui8Pos) ui8Pos = 0;
      - addressable_lambda:
          name: "Rotation 4x"
          update_interval: 32ms
          lambda: |-
            static uint8_t   ui8Pos = 2;
            if (initial_run) ui8Pos = 2;
            it.all().fade_to_black(56);
            it[ui8Pos + 0] = current_color;
            it[ui8Pos + 7] = current_color;
            it[ui8Pos +14] = current_color;
            it[ui8Pos +21] = current_color;
            ui8Pos++;
            if(it.size()/4 <= ui8Pos) ui8Pos = 0;
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - platform: partition
    name: "LEDs Button right"
    id: leds_button_right
    internal: true
    segments:
      - id: leds
        from: 7
        to: 7
  - platform: partition
    name: "LEDs Button middle"
    id: leds_button_middle
    internal: true
    segments:
      - id: leds
        from: 9
        to: 9
  - platform: partition
    name: "LEDs Button left"
    id: leds_button_left
    internal: true
    segments:
      - id: leds
        from: 11
        to: 11

  - platform: partition
    name: "LEDs Nightlight"
    id: leds_nightlight
    internal: true
    segments:
      - id: leds
        from: 0
        to: 6
      - id: leds
        from: 8
        to: 8
      - id: leds
        from: 10
        to: 10
      - id: leds
        from: 12
        to: 19
      - id: leds
        from: 27
        to: 27
      - id: leds_top
        from: 0
        to: 6

  - platform: partition
    name: "LEDs Top"
    id: leds_top
    internal: true
    segments:
      - id: leds
        from: 20
        to: 26
    effects:
      - addressable_scan:
          name: "Scan"
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20
      - pulse:
          name: "Pulse"
          transition_length: 0.3s
          update_interval: 0.3s
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 1s
      - addressable_lambda:
          name: "Press Hb"
          update_interval: 40ms
          lambda: |-
            static uint8_t       ui8Pos = 0;
            static const uint8_t arrui8Effect[] = 
            { 100, 100, 100, 100,   0,  30,  60, 
              100, 100, 100, 100,   0,  30,  60, 100, 100, 
              100, 100, 100, 100, 100, 100, 100, 100, 100 };
            if (initial_run)
            {
              ui8Pos = 0;
              it.all() = current_color.fade_to_black(arrui8Effect[ui8Pos]);
            }
            it[0] = it[1].get();
            it[6] = it[5].get();
            it[1] = it[2].get();
            it[5] = it[4].get();
            it[2] = it[3].get();
            it[4] = it[3].get();
            it[3] = current_color.fade_to_black(arrui8Effect[ui8Pos]);
            ui8Pos++;
            if(sizeof(arrui8Effect) <= ui8Pos)
              ui8Pos = 0;
      - addressable_lambda:
          name: "Press Left"
          update_interval: 40ms
          lambda: |-
            static uint8_t ui8Pos = 0;
            if (initial_run)
            {
              it.all() = Color::BLACK;
              ui8Pos = 0;
            }
            it.all().fade_to_black(20);
            switch( ui8Pos )
            {
              case 3:
              case 4: it[0] = current_color;
                      it[2] = current_color;
              case 0:
              case 1: 
              case 5: 
              case 6: it[1] = current_color;
                      ui8Pos++;
            }
      - addressable_lambda:
          name: "Press Center"
          update_interval: 40ms
          lambda: |-
            static uint8_t ui8Pos = 0;
            if (initial_run)
            {
              it.all() = Color::BLACK;
              ui8Pos = 0;
            }
            it.all().fade_to_black(20);
            switch( ui8Pos )
            {
              case 3:
              case 4: it[2] = current_color;
                      it[4] = current_color;
              case 0:
              case 1: 
              case 5: 
              case 6: it[3] = current_color;
                      ui8Pos++;
            }
      - addressable_lambda:
          name: "Press Right"
          update_interval: 40ms
          lambda: |-
            static uint8_t ui8Pos = 0;
            if (initial_run)
            {
              it.all() = Color::BLACK;
              ui8Pos = 0;
            }
            it.all().fade_to_black(20);
            switch( ui8Pos )
            {
              case 3:
              case 4: it[4] = current_color;
                      it[6] = current_color;
              case 0:
              case 1: 
              case 5: 
              case 6:it[5] = current_color;
                      ui8Pos++;
            }
      - addressable_lambda:
          name: "Swipe Right"
          update_interval: 40ms
          lambda: |-
            static uint8_t ui8Pos = 0;
            if (initial_run)
            {
              it.all() = Color::BLACK;
              ui8Pos = 0;
            }
            it.all().fade_to_black(20);
            if(it.size() -1 > ui8Pos)
            {
              it[ui8Pos] = current_color;
              ui8Pos++;
            }
      - addressable_lambda:
          name: "Swipe Left"
          update_interval: 40ms
          lambda: |-
            static uint8_t ui8Pos = it.size() -1;
            if (initial_run)
            {
              it.all() = Color::BLACK;
              ui8Pos = it.size() -1;
            }
            it.all().fade_to_black(20);
            if(0 != ui8Pos)
            {
              it[ui8Pos] = current_color;
              ui8Pos--;
            }

sensor:
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 3min
    accuracy_decimals: 0

media_player:
  - platform: i2s_audio
    id: media_out
    name: Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: lsb
    mode: mono
    on_play:
      - light.turn_on:
          id: leds_top
          brightness: ${audio_playing_brightness}
          red: !lambda "return id(audio_playing_color)[0]/100.0;"
          green: !lambda "return id(audio_playing_color)[1]/100.0;"
          blue:  !lambda "return id(audio_playing_color)[2]/100.0;"
          effect: ${audio_playing_effect}
    on_pause:
      - light.turn_off:
          id: leds_top
    on_idle:
      - light.turn_off:
          id: leds_top

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    - script.execute: led_on_touch
    - switch.turn_on: vibra
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - script.execute:
        id: handle_release
        pos: !lambda "return touch.x;"
    #- switch.turn_on: vibra
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    - script.execute: led_on_swipe_left
    #- switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_left
        state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_left", "Swipe Left Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    - script.execute: led_on_swipe_right
    #- switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_right
        state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_right", "Swipe Right Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - script.execute: led_on_full_touch
    #- switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: multi_touch
        state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

  on_long_touch_release:
    - script.execute: led_on_long_touch
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: long_press
        state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_long_touch_release", "Long Touch Release Position: %d / State: %d", touch.x, touch.state);

script:
  - id: refresh_led_default
    mode: restart
    then:
      - light.turn_off: leds_top
      - script.execute: refresh_led_relais

  - id: refresh_led_relais
    mode: restart
    then:
      - if:
          condition:
            lambda: "return (${relay_count}>1 && id(relay_1).state) ;"
          then:
            - script.execute: led_on_button_left
          else:
            - script.execute: led_off_button_left

      - if:
          condition:
            lambda: "return (${relay_count}==3 && id(relay_2).state) || (${relay_count}==1 && id(relay_1).state);"
          then:
            - script.execute: led_on_button_middle
          else:
            - script.execute: led_off_button_middle

      - if:
          condition:
            lambda: "return (${relay_count}==2 && id(relay_2).state) || (${relay_count}==3 && id(relay_3).state);"
          then:
            - script.execute: led_on_button_right
          else:
            - script.execute: led_off_button_right

      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - script.execute: led_on_nightlight
          else:
            - light.turn_off: leds_nightlight

  - id: led_on_button_left
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_left
          brightness: ${button_brightness}
          red:   !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"
          transition_length: 0s

  - id: led_on_button_middle
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_middle
          brightness: ${button_brightness}
          red:   !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"
          transition_length: 0s

  - id: led_on_button_right
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_right
          brightness: ${button_brightness}
          red:   !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue:  !lambda "return id(button_color)[2]/100.0;"
          transition_length: 0s

  - id: led_off_button_left
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - light.turn_on:
                id: leds_button_left
                brightness: ${nightlight_brightness}
                red:   !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_left
                transition_length: ${button_transition_time}

  - id: led_off_button_middle
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - light.turn_on:
                id: leds_button_middle
                brightness: ${nightlight_brightness}
                red:   !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_middle
                transition_length: ${button_transition_time}

  - id: led_off_button_right
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - light.turn_on:
                id: leds_button_right
                brightness: ${nightlight_brightness}
                red:   !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue:  !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_right
                transition_length: ${button_transition_time}

  - id: led_on_nightlight
    mode: restart
    then:
      - light.turn_on:
          id: leds_nightlight
          brightness: ${nightlight_brightness}
          red:   !lambda "return id(nightlight_color)[0]/100.0;"
          green: !lambda "return id(nightlight_color)[1]/100.0;"
          blue:  !lambda "return id(nightlight_color)[2]/100.0;"

  - id: led_on_release
    mode: restart
    then:
      - light.turn_off:
          id: leds_top

  - id: led_on_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${touch_press_brightness}
          red:   !lambda "return id(touch_color)[0]/100.0;"
          green: !lambda "return id(touch_color)[1]/100.0;"
          blue:  !lambda "return id(touch_color)[2]/100.0;"
          effect: ${touch_effect_press}

  - id: led_on_touch_left
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${touch_brightness}
          red:   !lambda "return id(touch_color)[0]/100.0;"
          green: !lambda "return id(touch_color)[1]/100.0;"
          blue:  !lambda "return id(touch_color)[2]/100.0;"
          effect: ${touch_effect_left}

  - id: led_on_touch_center
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${touch_brightness}
          red:   !lambda "return id(touch_color)[0]/100.0;"
          green: !lambda "return id(touch_color)[1]/100.0;"
          blue:  !lambda "return id(touch_color)[2]/100.0;"
          effect: ${touch_effect_center}

  - id: led_on_touch_right
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${touch_brightness}
          red:   !lambda "return id(touch_color)[0]/100.0;"
          green: !lambda "return id(touch_color)[1]/100.0;"
          blue:  !lambda "return id(touch_color)[2]/100.0;"
          effect: ${touch_effect_right}

  - id: led_on_swipe_left
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${swipe_left_brightness}
          red:   !lambda "return id(swipe_left_color)[0]/100.0;"
          green: !lambda "return id(swipe_left_color)[1]/100.0;"
          blue:  !lambda "return id(swipe_left_color)[2]/100.0;"
          effect: ${swipe_left_effect}

  - id: led_on_swipe_right
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${swipe_right_brightness}
          red:   !lambda "return id(swipe_right_color)[0]/100.0;"
          green: !lambda "return id(swipe_right_color)[1]/100.0;"
          blue:  !lambda "return id(swipe_right_color)[2]/100.0;"
          effect: ${swipe_right_effect}

  - id: led_on_full_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${multi_touch_brightness}
          red:   !lambda "return id(multi_touch_color)[0]/100.0;"
          green: !lambda "return id(multi_touch_color)[1]/100.0;"
          blue:  !lambda "return id(multi_touch_color)[2]/100.0;"
          effect: ${multi_touch_effect}


  - id: led_on_long_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${long_press_brightness}
          red:   !lambda "return id(long_press_color)[0]/100.0;"
          green: !lambda "return id(long_press_color)[1]/100.0;"
          blue:  !lambda "return id(long_press_color)[2]/100.0;"
          effect: ${long_press_effect}


  - id: handle_release
    mode: restart
    parameters:
      pos: int
    then:
      - if:
          condition:
            lambda: "return ${relay_count}==1;"
          then:
            - script.execute: led_on_touch_left
            - binary_sensor.template.publish:
                id: touchfield_1
                state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==2;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 5;"
                then:
                  - script.execute: led_on_touch_left
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - script.execute: led_on_touch_right
                  - binary_sensor.template.publish:
                      id: touchfield_2
                      state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==3;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 3;"
                then:
                  - script.execute: led_on_touch_left
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON
      
                else:
                  - if:
                      condition:
                        lambda: "return pos <= 7;"
                      then:
                        - script.execute: led_on_touch_center
                        - binary_sensor.template.publish:
                            id: touchfield_2
                            state: ON
      
                      else:
                        - script.execute: led_on_touch_right
                        - binary_sensor.template.publish:
                            id: touchfield_3
                            state: ON
